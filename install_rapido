#!/bin/bash

# =============================================
# AUTOINSTALADOR CORRIGIDO PARA BOT SSH
# Vers√£o: 3.1 (Resolve conflitos de depend√™ncias)
# =============================================

# Cores no terminal
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m'

# Fun√ß√£o de erro melhorada
check_error() {
  if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erro no passo: $1${NC}"
    
    # Corre√ß√£o autom√°tica para erros comuns
    case "$1" in
      "Depend√™ncias Node.js")
        echo -e "${YELLOW}üîÑ Tentando corrigir conflitos de depend√™ncias...${NC}"
        sudo apt remove --purge nodejs npm -y
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
        sudo apt-get install -y nodejs
        ;;
      *)
        exit 1
        ;;
    esac
    
    # Tentar novamente ap√≥s corre√ß√£o
    return 0
  fi
}

# Verifica√ß√£o de seguran√ßa
echo -e "${RED}‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è ATEN√á√ÉO! ESTE SCRIPT IR√Å: ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è${NC}"
echo -e "${RED}1. APAGAR TODOS OS DADOS DESTA VPS${NC}"
echo -e "${RED}2. INSTALAR DEBIAN 11 DO ZERO${NC}"
echo -e "${RED}3. CONFIGURAR O BOT SSH AUTOMATICAMENTE${NC}"
echo -e "\n${YELLOW}Voc√™ tem 30 segundos para cancelar (Ctrl+C)${NC}"
sleep 30

# Confirma√ß√£o final
read -p "‚ö†Ô∏è Confirmar formata√ß√£o completa e instala√ß√£o? (s/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Ss]$ ]]; then
  echo -e "${GREEN}Opera√ß√£o cancelada pelo usu√°rio.${NC}"
  exit 0
fi

# 1. Pr√©-formata√ß√£o (backup opcional)
echo -e "${BLUE}üîÑ Preparando ambiente para formata√ß√£o...${NC}"
mkdir -p /tmp/backup-bot 2>/dev/null
cp -r ~/bot-ssh /tmp/backup-bot/ 2>/dev/null

# 2. Instala√ß√£o limpa do Debian 11
echo -e "${BLUE}üõ†Ô∏è Instalando Debian 11 (Bullseye)...${NC}"
apt-get purge -y * 2>/dev/null
apt-get autoremove -y 2>/dev/null

# Instala√ß√£o m√≠nima
apt-get update && apt-get install -y --reinstall debian-keyring debian-archive-keyring
check_error "Reposit√≥rios Debian"

# 3. Instala√ß√£o do ambiente b√°sico (com corre√ß√£o para Node.js)
echo -e "${BLUE}üì¶ Instalando ambiente b√°sico...${NC}"
sudo apt remove --purge nodejs npm nodejs-legacy libnode72 -y 2>/dev/null
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt-get install -y \
  sudo curl wget git unzip \
  build-essential python3 make gcc \
  libssh2-1-dev nodejs \
  net-tools iptables
check_error "Depend√™ncias b√°sicas"

# 4. Instala√ß√£o do Bot SSH
echo -e "${GREEN}ü§ñ Iniciando instala√ß√£o do Bot SSH...${NC}"

# Configura√ß√£o do diret√≥rio
mkdir -p ~/bot-ssh && cd ~/bot-ssh || check_error "Diret√≥rio"

# Baixar Bot
echo -e "${BLUE}‚¨áÔ∏è Baixando o Bot SSH...${NC}"
wget -q --show-progress https://github.com/Marcelo1408/BOT_SCRIPT_SSH/raw/main/novobotssh.zip -O bot.zip
check_error "Download do Bot"

unzip -o bot.zip
rm -f bot.zip
check_error "Extra√ß√£o"

# Limpar depend√™ncias antigas
rm -rf node_modules package-lock.json

# Criar package.json atualizado
echo -e "${BLUE}üìÑ Criando package.json...${NC}"
cat > package.json <<EOF
{
  "name": "bot-ssh",
  "version": "2.1",
  "dependencies": {
    "axios": "^1.10.0",
    "date-fns": "^2.30.0",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "fs-extra": "^11.2.0",
    "lodash": "^4.17.21",
    "multer": "^2.0.1",
    "node-cron": "^4.1.1",
    "node-ssh": "^13.2.1",
    "node-telegram-bot-api": "^0.61.0",
    "pm2": "^6.0.8",
    "ssh2": "^1.11.0",
    "ssh2-sftp-client": "^12.0.1"
  }
}
EOF

# Instalar depend√™ncias com for√ßa (--force)
echo -e "${BLUE}üì¶ Instalando depend√™ncias Node.js...${NC}"
npm install --force
check_error "Instala√ß√£o de depend√™ncias"

# 5. Configura√ß√£o do Bot
echo -e "${BLUE}‚öôÔ∏è Configura√ß√£o do Bot SSH...${NC}"
read -p "Digite o BOT_TOKEN do Telegram: " BOT_TOKEN
read -p "Digite o ADM_ID do Telegram: " ADM_ID

# Criar .env com configura√ß√£o autom√°tica
cat > .env <<EOF
BOT_TOKEN=$BOT_TOKEN
ADM_ID=$ADM_ID
SERVER_HOST=$(curl -s ifconfig.me)
SERVER_USER=admin
SERVER_PASSWORD=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 16)
SERVER_PORT=22
SSH_TIMEOUT=20000
EOF

# 6. Gerenciamento com PM2
echo -e "${BLUE}üöÄ Configurando PM2...${NC}"
npm install -g pm2
pm2 delete bot-ssh 2>/dev/null
pm2 start index.js --name "bot-ssh"
pm2 startup && pm2 save

# 7. Finaliza√ß√£o
echo -e "${GREEN}"
echo "============================================="
echo "üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!"
echo "============================================="
echo -e "${NC}"
echo -e "${BLUE}üìå INFORMA√á√ïES IMPORTANTES:${NC}"
echo -e "IP do servidor: $(curl -s ifconfig.me)"
echo -e "Usu√°rio SSH: admin"
echo -e "Senha SSH: $(grep SERVER_PASSWORD .env | cut -d= -f2 | tr -d "'")"
echo -e "\n${BLUE}‚öôÔ∏è COMANDOS √öTEIS:${NC}"
echo -e "pm2 logs bot-ssh       ‚Üí Ver logs"
echo -e "pm2 restart bot-ssh    ‚Üí Reiniciar bot"
echo -e "pm2 list               ‚Üí Ver status"
echo -e "\n${YELLOW}‚ö†Ô∏è Configure um firewall adequado ap√≥s a instala√ß√£o!${NC}"
