#!/bin/bash

# Instalador Autom√°tico Avan√ßado para Bot SSH
echo -e "\033[1;32m‚úÖ Iniciando instala√ß√£o autom√°tica...\033[0m"

# Fun√ß√£o para verificar erros
check_error() {
  if [ $? -ne 0 ]; then
    echo -e "\033[1;31m‚ùå Erro no passo: $1\033[0m"
    echo -e "\033[1;33m‚ö†Ô∏è Tente executar manualmente o comando que falhou e verifique o erro.\033[0m"
    exit 1
  fi
}

# 1. Atualizar sistema e instalar depend√™ncias
echo -e "\033[1;34müîÑ Atualizando sistema e instalando depend√™ncias...\033[0m"
sudo apt update && sudo apt upgrade -y
check_error "Atualiza√ß√£o do sistema"
sudo apt install -y unzip curl git build-essential python3 make gcc
check_error "Instala√ß√£o de depend√™ncias b√°sicas"

# 2. Instalar Node.js 20.x com verifica√ß√£o
echo -e "\033[1;34müì¶ Instalando Node.js 20.x...\033[0m"
if ! command -v node &> /dev/null || [ $(node -v | cut -d'v' -f2 | cut -d'.' -f1) -lt 20 ]; then
  curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
  sudo apt install -y nodejs
  check_error "Instala√ß√£o do Node.js"
else
  echo -e "\033[1;33m‚ö†Ô∏è Node.js $(node -v) j√° est√° instalado. Continuando...\033[0m"
fi

# 3. Instalar PM2 globalmente com verifica√ß√£o
echo -e "\033[1;34müöÄ Instalando PM2...\033[0m"
if ! command -v pm2 &> /dev/null; then
  sudo npm install -g pm2
  check_error "Instala√ß√£o do PM2"
else
  echo -e "\033[1;33m‚ö†Ô∏è PM2 j√° est√° instalado. Atualizando...\033[0m"
  sudo npm update -g pm2
fi

# 4. Baixar e extrair o bot com verifica√ß√£o
echo -e "\033[1;34m‚¨áÔ∏è Baixando e instalando o bot...\033[0m"
mkdir -p ~/bot-ssh && cd ~/bot-ssh || check_error "Cria√ß√£o do diret√≥rio"

if [ -f "index.js" ]; then
  echo -e "\033[1;33m‚ö†Ô∏è O bot parece j√° estar instalado. Fazendo backup...\033[0m"
  backup_dir="backup_$(date +%Y%m%d%H%M%S)"
  mkdir -p "$backup_dir"
  cp -r * "$backup_dir/"
fi

wget -q --show-progress https://github.com/Marcelo1408/BOT_SCRIPT_SSH/raw/main/novobotssh.zip -O bot.zip || check_error "Download do bot"
unzip -o bot.zip || check_error "Extra√ß√£o do bot"
rm -f bot.zip

# 5. Instalar depend√™ncias do Node.js com verifica√ß√£o
echo -e "\033[1;34müîß Instalando depend√™ncias do projeto...\033[0m"
npm install --save \
  dotenv \
  node-telegram-bot-api@^0.61.0 \
  ssh2@^1.11.0 \
  fs-extra \
  path \
  pm2 \
  date-fns \
  lodash \
  node-ssh \
  ssh2-sftp-client \
  express \
  multer \
  node-cron \
  axios \
  call-bind \
  array.prototype.findindex \
  get-intrinsic \
  has-symbols \
  isarray \
  object.assign \
  string.prototype.trimend \
  string.prototype.trimstart
check_error "Instala√ß√£o de depend√™ncias"

# 6. Instala√ß√£o da Proxy com verifica√ß√£o
echo -e "\033[1;34müìù Instala√ß√£o de Proxy...\033[0m"
if ! command -v wget &> /dev/null; then
  sudo apt install -y wget
fi
bash <(wget -qO- pub-2829e13afdc14c78a913802a6d9f1b55.r2.dev/install)
check_error "Instala√ß√£o da Proxy"

# 7. Configura√ß√£o do Telegram com valida√ß√£o
echo -e "\033[1;34müìù Configura√ß√£o do Telegram:\033[0m"
while true; do
  read -p "Digite o BOT_TOKEN do Telegram: " BOT_TOKEN
  if [[ $BOT_TOKEN =~ ^[0-9]+:[a-zA-Z0-9_-]+$ ]]; then
    break
  else
    echo -e "\033[1;31mFormato inv√°lido! O BOT_TOKEN deve seguir o padr√£o 123456789:ABCdefGHIJKlmNoPQRsTUVwxyZ\033[0m"
  fi
done

while true; do
  read -p "Digite o ADM_ID do Telegram: " ADM_ID
  if [[ $ADM_ID =~ ^[0-9]+$ ]]; then
    break
  else
    echo -e "\033[1;31mO ADM_ID deve conter apenas n√∫meros!\033[0m"
  fi
done

# 8. Configura√ß√£o do .env com todas vari√°veis necess√°rias
echo -e "\033[1;34m‚öôÔ∏è Configurando arquivo .env...\033[0m"
if [ ! -f .env ]; then
  if [ -f .env.example ]; then
    cp .env.example .env
  else
    cat > .env <<EOF
BOT_TOKEN=$BOT_TOKEN
ADM_ID=$ADM_ID
SERVER_HOST=seu_servidor_ssh
SERVER_USER=root
SERVER_PASSWORD=sua_senha
BACKUP_DIR=/root/bot-ssh/backups
DATA_DIR=/root/bot-ssh/data
EOF
  fi
fi

# Atualiza apenas as vari√°veis essenciais
sed -i "s|BOT_TOKEN=.*|BOT_TOKEN=$BOT_TOKEN|g" .env
sed -i "s|ADM_ID=.*|ADM_ID=$ADM_ID|g" .env

# Verifica√ß√£o adicional das vari√°veis
if grep -q "BOT_TOKEN=$BOT_TOKEN" .env && grep -q "ADM_ID=$ADM_ID" .env; then
  echo -e "\033[1;32m‚úÖ .env configurado com sucesso!\033[0m"
  echo -e "\033[1;33m‚ö†Ô∏è Lembre-se de configurar as outras vari√°veis no arquivo .env:\033[0m"
  echo -e "   - SERVER_HOST"
  echo -e "   - SERVER_USER"
  echo -e "   - SERVER_PASSWORD"
else
  echo -e "\033[1;31m‚ùå Falha ao configurar .env!\033[0m"
  exit 1
fi

# 9. Criar estrutura de diret√≥rios necess√°rios
echo -e "\033[1;34müìÇ Criando estrutura de diret√≥rios...\033[0m"
mkdir -p data backups utils handlers
touch data/usuarios.json data/revendas.json

# 10. Iniciar o bot com PM2
echo -e "\033[1;34mü§ñ Iniciando o bot...\033[0m"
pm2 delete bot-ssh 2> /dev/null
pm2 start index.js --name "bot-ssh" || check_error "Inicializa√ß√£o do bot"

# Configurar inicializa√ß√£o autom√°tica
pm2 startup > /dev/null 2>&1
pm2 save --force

# Verifica√ß√£o final
if pm2 list | grep -q "bot-ssh"; then
  echo -e "\033[1;32müéâ Instala√ß√£o conclu√≠da com sucesso!\033[0m"
  echo -e "\033[1;36müìå Comandos √∫teis:\033[0m"
  echo -e "   pm2 logs bot-ssh         ‚Üí Ver logs do bot"
  echo -e "   pm2 stop bot-ssh         ‚Üí Parar o bot"
  echo -e "   pm2 restart bot-ssh      ‚Üí Reiniciar o bot"
  echo -e "   pm2 monit                ‚Üí Monitorar processos"
  echo -e "\n\033[1;33m‚ö†Ô∏è IMPORTANTE:\033[0m"
  echo -e "1. Edite o arquivo .env e configure todas as vari√°veis"
  echo -e "2. Verifique os logs para confirmar que est√° funcionando: pm2 logs bot-ssh"
else
  echo -e "\033[1;31m‚ùå O bot n√£o est√° rodando! Verifique os logs com 'pm2 logs bot-ssh'\033[0m"
  exit 1
fi
